package com.github.jozijug.service.querydsl;

import com.github.jozijug.jpadomain.Company;
import com.github.jozijug.jpadomain.Contact;
import com.github.jozijug.service.ContactService;
import com.mysema.query.types.Predicate;


import java.util.ArrayList;
import java.util.List;
import javax.ejb.Stateless;
import javax.inject.Inject;
import static com.github.jozijug.jpadomain.QContact.contact;
import org.springframework.data.domain.PageRequest;

/**
 * Spring Data + QueryDSL based implementation. QueryDSL can also be used alone,
 * but its sweet spot is as a compliment to the "contactRepository helpers" like Spring
 * Data and DeltaSpike Data. Here we just implement couple of queries with it
 * and rely simple stuff to Spring Data. We also use built in QueryDSL
 * integration in Spring Data so we only need to construct the predicate part.
 *
 * <p>
 * The Q prefixed classess, on which the QueryDSL magic is based on, are
 * autogenerated based on entity classes, see pom.xml for a setup.
 */
@Stateless
public class QueryDslContactService implements ContactService {

    @Inject
    ContactRepository contactRepository;

    @Inject
    CompanyRepository companyRepository;

    public List<Contact> findPageByCompanyAndName(Company company, String filter, int firstrow, int maxrows) {
        return contactRepository.findAll(createQuery(company, filter),
                new PageRequest(firstrow / maxrows, maxrows)).getContent();
    }

    private Predicate createQuery(Company company, String filter) {
        return contact.company.eq(company).and(contact.name.containsIgnoreCase(filter));
    }

    public Long countByCompanyAndName(Company company, String filter) {
        return contactRepository.count(createQuery(company, filter));
    }

    @Override
    public List<Contact> findByCompanyAndName(Company company, String filter) {
        List<Contact> results = new ArrayList<Contact>();
        for(Contact item : contactRepository.findAll(createQuery(company, filter))) {
            results.add(item);
        }
        return results;
    }

    public void save(Contact entry) {
        contactRepository.save(entry);
    }

    public void delete(Contact value) {
        contactRepository.delete(value);
    }

    public List<Company> findCompanies() {
        return companyRepository.findAll();
    }

    public Contact refreshEntry(Contact entry) {
        return contactRepository.findOne(entry.getId());
    }

}
